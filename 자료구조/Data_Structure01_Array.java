package Algorithms.Data_Structure;
/*
자료구조란?
(자료구조, 데이터 구조)
- 대량의 데이터를 효율적으로 관리할 수 있는 데이터 구조를 의미

알고리즘이란?
어떠한 문제를 풀기 위한 절차 / 방법
특정한 입력을 넣으면 원하는 출력을 얻을 수 있도록 만드는 프로그래밍

판단의 기준
1. 시간의 소요
2. 데이터 공간의 효율

특정 알고리즘이 어느정도의 시간이 소요되는 지 잘 파악하고 있어야함.
 */

public class Data_Structure01_Array {
    /*
    배열 (Array)
    데이터를 나열하고, 각 데이터를 인덱스에 대응하도록 구성한 데이터 구조

    필요성
    - 같은 종류의 데이터를 순차적으로 저장하여 효울적으로 관리 가능

    배열이 없다면?
    같은 종류의 순차적 데이터들을 변수로 하나하나 설정해준 후 사용해야한다.

    배열의 장점
    - 원하는 데이터에 대한 빠른 접근이 가능하다.
    배열의 단점
    - 미리 배열의 최대 길이를 설정해주어야 한다.
    - 배열의 크기가 정해진 후 크기를 늘리거나 줄이는 것이 불가하다.
    - 값의 추가 및 삭제가 쉽지 않다.
     */



    public static void main(String args[]) {

        int[] a; // 배열의 선언
        String b[]; //  자료형에 따른 배열의 선언

        a = new int[10]; // 배열의 크기의 선언

        int[] c = new int[10];
        // 배열의 선언과 동시에 크기 할당

        int d[] = {1,2,3,4,5};
        // 배열의 선언과 동시에 값 할당 (크기는 값의 개수)
        // 배열의 인덱스는 0부터 시작한다.

        a[0] = 1; // 배열의 0번째 인덱스의 값 할당

        int[][] e = new int[2][2];
        // [행][렬] 2차원 배열의 생성

        // 배열의 주소값 복사
        int[] f = {1,2,3,4,5};
        int[] g;
        g = f;
        // g가 f와 값을 공유한다. (바로가기와 유사)
        // f의 값 변경 시 g의 값도 변경

        // 배열의 요소 값 복사
        int[] h = {1,2,3,4,5};
        int[] i;
        i = h.clone(); // 또는 for 문으로 복사
        // 요소의 값만 복사하여 h값 변경 시 i 값은 변경되지 않음
        // 주소값이 달라 값을 공유하지 않는다.


    }
}

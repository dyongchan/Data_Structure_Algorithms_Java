알고리즘 복잡도 표현 방법

1. 알고리즘 복잡도의 계산이 필요한 이유
* 하나의 문제를 푸는데 알고리즘은 매우 다양하다.
: 모든 사람의 풀이는 다르지만 처리 속도가 빠른 것이 중요하다.

다양한 알고리즘 중 어떤 알고리즘이 좋은지를 분석하기 위해, 복잡도를 정의 및 계산한다.

- 정수의 절대값 구하기
1 - 정수값을 제곱한 값에 다시 루트
2 - 정수가 음수인지 확인하고, 음수일 때만 -1 곱하기

2. 알고리즘 복잡도의 계산 항목
- 시간 복잡도 : 알고리즘의 실행 속도 (매우 중요)
- 공간 복잡도 : 알고리즘이 사용하는 메모리의 사이즈 (중요도 낮음)

3. 알고리즘 시간 복잡도의 주요 요소
- 반복문이 지배한다.
: 입력의 크기가 커지면 커질수록 반복문이 알고리즘 수행시간에 영향을 준다.

4. 알고리즘 성능 표기법

1) Big O 표기법 : O(N) - (매우 중요)
- 알고리즘 최악의 실행 시간을 표기
- 가장 많이 / 일반적으로 사용
- 아무리 최악의 시간이라도 최소한의 그만 큼의 성능을 보장한다.

2) 오메가 표기법 : 오메가(N)
- 알고리즘 최상의 실행 시간을 표기

3) 세타 표기법 : 세타(N)
- 알고리즘 평균 실행 시간을 표기

Big - O 표기법
- O(입력)
입력되는 n에 따라 결정되는 시간 복잡도 함수
실제 입력되는 상수와 상관없이 무한적 반복되는 점화식으로 표현된다.

n의 크기에 따라 시간복잡도가 기하급수적으로 변경됨 (n을 무한대로 보냈을때로 체크)
n에 따른 시간 복잡도의 크기 : O(1) < O(logn) < O(n) <O(nlogn) < O(n^2) <  O(2^n) < O(n!)

























